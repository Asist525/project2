services:
  db:
    image: postgres:15.2
    container_name: project2-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: project2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secure-password
    networks:
      - backend

  redis:
    image: redis:7.2
    container_name: project2-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: project2-backend
    ports:
      - "8000:8000"
    env_file:
      - .env.prod
    volumes:
      - ./backend:/app/backend
      - ./core:/app/core
      - ./ai:/app/ai
      - ./history:/app/history
      - ./database:/app/database
      - ./staticfiles:/app/staticfiles
    depends_on:
      - db
      - redis
    networks:
      - backend

  trading:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: project2-trading
    command: ["./wait-for-it.sh", "db:5432", "--", "python", "manage.py", "runserver", "0.0.0.0:9000"]
    depends_on:
      - db
    ports:
      - "9000:9000"
    env_file:
      - .env.prod
    volumes:
      - ./trading:/app/trading
      - ./wait-for-it.sh:/app/wait-for-it.sh
      - ./staticfiles:/app/staticfiles
    networks:
      - backend
  
  bot:
    build:
      context: .
      dockerfile: Dockerfile.trading
    container_name: trading-bot
    restart: always
    command: >
      sh -c "while true; do
        echo '$(date) - Running trading.py' &&
        python /app/trading/trading.py &&
        echo 'Sleeping 5 minutes...' &&
        sleep 120;
      done"
    volumes:
      - ./trading:/app/trading
      - /home/ubuntu/project/trading/trading/config:/app/trading/config 
    environment:
      - TZ=Asi  a/Seoul
    networks:
      - backend

    

volumes:
  postgres_data:
  redis_data:
  staticfiles:

networks:
  backend:
    driver: bridge
